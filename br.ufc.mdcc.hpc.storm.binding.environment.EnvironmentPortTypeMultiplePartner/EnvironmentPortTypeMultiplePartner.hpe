<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000e95dbd41b543a031128d946eae8ba0501b77bc29bd0cfdfe1ef19f97361cb44d1ae7c14982ec33e7e67290043b9159de07adaa3724e6ead63f3495d5344bd7f86a3431af83c22030b0c101695785c958f414669fd55c94ac81d87056a4f8b286c42275ae9a30ae7e2f35f223fa170748bb85e171a25c2c0b84af91b6b399cbae" isAbstract="true" kind="Qualifier" name="EnvironmentPortTypeMultiplePartner" packagePath="br.ufc.mdcc.hpc.storm.binding.environment">
    <baseType>
      <extensionType>
        <extends>true</extends>
      </extensionType>
      <component hash_component_UID="002400000480000094000000060200000024000052534131000400001100000049f5fd6a67086fe379e76c160eaede723fec50738e6f016b672e6c03394fcdec2bc00cc9e5c5be4d5f87b83ba04e19f7fc9a0e51ea40846c33dffa1f3a93827a52182b2f5624421a87e5800b0fce98e26f0447c79733334702adddf2b7e3eb75a3719268e497a9339bbcdfee3a32ada4dfc0f2dd6918327d7544d407a02c59b9" localRef="base" location="br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType/EnvironmentPortType.hpe" name="EnvironmentPortType" package="br.ufc.mdcc.hpc.storm.binding.environment" version="1.0.0.0">
        <visualDescription h="60" w="100" x="197" y="182">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <unitBounds parallel="true" uRef="environment_port_type">
          <visualDescription h="20" w="20" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <interface iRef="IEnvironmentPortTypeMultiplePartner" nArgs="0">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* AUTOMATICALLY GENERATE CODE */&#xA;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType;&#xA;&#xA;namespace br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeMultipleClient&#xA;{&#xA;&#x9;public interface BaseIEnvironmentPortTypeMultipleClient : BaseIEnvironmentPortType, IQualifierKind &#xA;&#x9;{&#xA;&#x9;}&#xA;}" name="BaseIEnvironmentPortTypeMultiplePartner.cs" srcType="base" uri="br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeMultiplePartner/bin/1.0.0.0/BaseIEnvironmentPortTypeMultiplePartner.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType/bin/1.0.0.0/BaseIEnvironmentPortType.dll</dependency>
        </file>
        <file contents="using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType;&#xA;using System.Collections.Generic;&#xA;using MPI;&#xA;using System;&#xA;&#xA;namespace br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeMultipleClient&#xA;{&#xA;&#x9;public interface IEnvironmentPortTypeMultipleClient : BaseIEnvironmentPortTypeMultipleClient, IEnvironmentPortType&#xA;&#x9;{&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;public interface IScatterResult&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;T[] Value { get; } &#xA;&#x9;&#x9;void check_size (int remote_size);&#xA;&#x9;}&#xA;&#xA;&#x9;internal class Scatter&lt;T> : IScatterResult&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;private T[] values;&#xA;&#xA;&#x9;&#x9;public Scatter(T[] values)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.values = values;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#region IScatter implementation&#xA;&#x9;&#x9;public T[] Value {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;return this.values;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;public void check_size(int remote_size)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if (Value.Length != remote_size)&#xA;&#x9;&#x9;&#x9;&#x9;throw new Exception (&quot;Invalid attempt to build a scatter object: the size of the array must be equal to the size of the communicator's remote group&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;public class ScatterResult&lt;U>&#xA;&#x9;{&#xA;&#x9;&#x9;// This function must be called from within the environemnt binding.&#xA;&#x9;&#x9;public static IScatterResult&lt;U> newResult (Intercommunicator comm, U[] values)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;IScatterResult&lt;U> res = new Scatter&lt;U> (values);&#xA;&#x9;&#x9;&#x9;res.check_size (comm.RemoteSize);&#xA;&#x9;&#x9;&#x9;return res;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;public interface IGatherArgument&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;T[] Value { get; }&#xA;&#x9;}&#xA;&#xA;&#x9;public interface IReduceArgument&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;T Value { get; } &#xA;&#x9;}&#xA;&#xA;&#x9;public interface IScanArgument&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;T Value { get; } &#xA;&#x9;}&#xA;&#xA;&#x9;internal class Gather&lt;T> : IGatherArgument&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;private T[] values;&#xA;&#xA;&#x9;&#x9;internal Gather(T[] values)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.values = values;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#region IGather implementation&#xA;&#xA;&#x9;&#x9;public T[] Value {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;return this.values;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;public class GatherArgument&lt;U>&#xA;&#x9;{&#xA;&#x9;&#x9;// This function must be called from within the environemnt binding.&#xA;&#x9;&#x9;public static IGatherArgument&lt;U> newArgument (Intercommunicator comm, U[] values)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if (comm.RemoteSize != values.Length)&#xA;&#x9;&#x9;&#x9;&#x9;throw new Exception (&quot;Invalid attempt to build a gather object: the size of the array must be equal to the size of the communicator's remote group&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;return new Gather&lt;U>(values);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;public delegate T Operator&lt;T> (T v1, T v2);&#xA;&#xA;&#xA;&#x9;internal class Reduce&lt;T> : IReduceArgument&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;private T value;&#xA;&#xA;&#x9;&#x9;internal Reduce(T value)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.value = value;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#region IReduce implementation&#xA;&#xA;&#x9;&#x9;public T Value {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;return this.value;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;/* The operator is defined in subclasses of IEnvironmentPortTypeMultipleClass, in such a way they may be informed by the user. &#xA;&#x9;&#x9; * So, the binding implementation, which know the proper subclass, may get the corret operator.&#xA;&#x9;&#x9; */&#xA;&#xA;&#x9;}&#xA;&#xA;&#x9;public class ReduceArgument&lt;U>&#xA;&#x9;{&#xA;&#x9;&#x9;// This function must be called from within the environemnt binding.&#xA;&#x9;&#x9;public static IReduceArgument&lt;U> newArgument (Intercommunicator comm, U[] values, Operator&lt;U> op, U v0)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if (comm.RemoteSize != values.Length)&#xA;&#x9;&#x9;&#x9;&#x9;throw new Exception (&quot;Invalid attempt to build a reduce object: the size of the array must be equal to the size of the communicator's remote group&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;U value = v0;&#xA;&#xA;&#x9;&#x9;&#x9;// apply the operator&#xA;&#x9;&#x9;&#x9;foreach (U v in values)&#xA;&#x9;&#x9;&#x9;&#x9;value = op(value, v);&#xA;&#xA;&#x9;&#x9;&#x9;return new Reduce&lt;U>(value);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#xA;&#x9;internal class Scan&lt;T> : IScanArgument&lt;T>&#xA;&#x9;{&#xA;&#x9;&#x9;private T value;&#xA;&#xA;&#x9;&#x9;internal Scan(T value)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.value = value;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#region IScan implementation&#xA;&#xA;&#x9;&#x9;public T Value {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;return this.value;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;/* The operator is defined in subclasses of IEnvironmentPortTypeMultipleClass, in such a way they may be informed by the user. &#xA;&#x9;&#x9; * So, the binding implementation, which know the proper subclass, may get the corret operator.&#xA;&#x9;&#x9; */&#xA;&#x9;}&#xA;&#xA;&#x9;public class ScanArgument&lt;U>&#xA;&#x9;{&#xA;&#x9;&#x9;// This function must be called from within the environemnt binding.&#xA;&#x9;&#x9;public static IScanArgument&lt;U> newArgument (Intercommunicator comm, U[] values, Operator&lt;U> op, U v0)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int rank = comm.Rank;&#xA;&#xA;&#x9;&#x9;&#x9;if (comm.RemoteSize != values.Length)&#xA;&#x9;&#x9;&#x9;&#x9;throw new Exception (&quot;Invalid attempt to build a scan object: the size of the array must be equal to the size of the communicator's remote group&quot;);&#xA;&#xA;&#x9;&#x9;&#x9;U value = v0;&#xA;&#xA;&#x9;&#x9;&#x9;// apply the operator&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;rank; i++)&#xA;&#x9;&#x9;&#x9;&#x9;value = op(value, values[i]);&#xA;&#xA;&#x9;&#x9;&#x9;return new Scan&lt;U>(value);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;}" name="IEnvironmentPortTypeMultiplePartner.cs" srcType="user" uri="br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeMultiplePartner/bin/1.0.0.0/IEnvironmentPortTypeMultiplePartner.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeMultiplePartner/bin/1.0.0.0/BaseIEnvironmentPortTypeMultiplePartner.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType/bin/1.0.0.0/IEnvironmentPortType.dll</dependency>
        </file>
      </sources>
      <visualDescription h="57" w="361" x="15" y="81">
        <color b="144" g="238" r="144"/>
      </visualDescription>
    </interface>
    <unit facet="0" iRef="IEnvironmentPortTypeMultiplePartner" multiple="true" private="false" replica="0" uRef="environment_port_type" visibleInterface="true">
      <super cRef="base" uRef="environment_port_type"/>
      <visualDescription h="57" w="202" x="17" y="341"/>
    </unit>
  </componentInfo>
</component:component>