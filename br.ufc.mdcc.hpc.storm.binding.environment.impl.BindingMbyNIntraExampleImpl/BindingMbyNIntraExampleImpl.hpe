<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000007fafdf2abd5c34657c8d41aa99203af5e8ef519b30e9635fc6960033db5185b75db7aca1f8b189ebdf984b5181eea92168720cfe74e3db6227eebc288b0c41f4156aa94fabfe5f6a6eccb64d8ae3b5c2965c594cb8cbaaaf87a0937bd0d2e7da5a7784ed1999103eadee3761a6088a13e092570f4df77e26d130425225e4488d" isAbstract="false" kind="Synchronizer" name="BindingMbyNIntraExampleImpl" packagePath="br.ufc.mdcc.hpc.storm.binding.environment.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000f93dddfbf0a0573e316fa165552ef8b584ca86b29fda1fcce2f97668654b463d8e85b3bce42a0512283ead564755c35133ed8a1ba34f604ac4a933c6548f453cf4f7d3c7a969d218226d2c852fc5bdfb59c3a0257c8a0b7e122b70c1b6457e4acf33c796586fca99684ab790f3ec5651896a527343d7a149bca605fe031784af" localRef="base" location="br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingMbyNIntra/EnvironmentBindingMbyNIntra.hpe" name="EnvironmentBindingMbyNIntra" package="br.ufc.mdcc.hpc.storm.binding.environment" version="1.0.0.0">
        <visualDescription h="60" w="100" x="228" y="247">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="client_port_type" varName="C"/>
        <parameter formFieldId="server_port_type" varName="S"/>
        <unitBounds parallel="true" uRef="client">
          <visualDescription h="20" w="20" x="8" y="21"/>
        </unitBounds>
        <unitBounds parallel="true" uRef="server">
          <visualDescription h="20" w="20" x="66" y="24"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent localRef="client_port_type" location="br.ufc.mdcc.hpc.storm.binding.environment.example.MbyN.EnvironmentPortTypeClient/EnvironmentPortTypeClient.hpe" multiple="false" name="EnvironmentPortTypeClient" package="br.ufc.mdcc.hpc.storm.binding.environment.example.MbyN" exposed="false">
      <visualDescription h="60" w="100" x="47" y="286">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds parallel="true" uRef="environment_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent localRef="server_port_type" location="br.ufc.mdcc.hpc.storm.binding.environment.example.MbyN.EnvironmentPortTypeServer/EnvironmentPortTypeServer.hpe" multiple="false" name="EnvironmentPortTypeServer" package="br.ufc.mdcc.hpc.storm.binding.environment.example.MbyN" exposed="false">
      <visualDescription h="60" w="100" x="161" y="351">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds parallel="true" uRef="environment_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="client_port_type" direct="true" varName="C"/>
    <supplyParameter cRef="server_port_type" direct="true" varName="S"/>
    <interface iRef="IBindingMyNIntraExampleClient" nArgs="1">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.example.MbyN.EnvironmentPortTypeClient;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingMbyNIntra;&#xA;&#xA;namespace br.ufc.mdcc.hpc.storm.binding.environment.impl.BindingMbyNIntraExampleImpl &#xA;{&#xA;&#x9;public abstract class BaseIBindingMyNIntraExampleClient&lt;C>: Synchronizer, BaseIClientMbyNIntra&lt;C>&#xA;&#x9;&#x9;where C:IMbyNClientPortTypeExample&#xA;&#x9;{&#xA;&#x9;&#x9;private C client_port_type = default(C);&#xA;&#xA;&#x9;&#x9;protected C Client_port_type&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.client_port_type == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.client_port_type = (C) Services.getPort(&quot;client_port_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.client_port_type;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIBindingMyNIntraExampleClient.cs" srcType="base" uri="br.ufc.mdcc.hpc.storm.binding.environment.impl.BindingMbyNIntraExampleImpl/bin/1.0.0.0/BaseIBindingMyNIntraExampleClient.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType/bin/1.0.0.0/IEnvironmentPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingMbyNIntra/bin/1.0.0.0/BaseIClientMbyNIntra.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.example.MbyN.EnvironmentPortTypeClient;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingMbyNIntra;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeMultiplePartner;&#xA;using System.Collections.Generic;&#xA;&#xA;namespace br.ufc.mdcc.hpc.storm.binding.environment.impl.BindingMbyNIntraExampleImpl&#xA;{&#xA;//&#x9;public class IBindingMyNIntraExampleClient&lt;C> : BaseIBindingMyNIntraExampleClient&lt;C>, IClientMbyNIntra&lt;C>&#xA;//&#x9;&#x9;where C:IMbyNClientPortTypeExample&#xA;&#x9;public class IBindingMyNIntraExampleClient : BaseIBindingMyNIntraExampleClient&lt;IMbyNClientPortTypeExample>, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IClientMbyNIntra&lt;IMbyNClientPortTypeExample>&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;private MPI.Intercommunicator channel;&#xA;&#xA;&#x9;&#x9;public override void after_initialize ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int remote_leader = this.UnitRanks [&quot;server&quot;] [0];&#xA;&#x9;&#x9;&#x9;channel = new MPI.Intercommunicator(this.PeerComm, 0, this.Communicator, remote_leader, 0);&#xA;&#x9;&#x9;&#x9;service = new IMbyNClientPortTypeExampleImpl (channel);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#region IClientBase implementation&#xA;&#xA;&#x9;&#x9;private IMbyNClientPortTypeExample service;&#xA;&#xA;&#x9;&#x9;public IMbyNClientPortTypeExample Service {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;return service;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;internal class IMbyNClientPortTypeExampleImpl : IMbyNClientPortTypeExample &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;private MPI.Intercommunicator channel;&#xA;&#xA;&#x9;&#x9;&#x9;internal IMbyNClientPortTypeExampleImpl(MPI.Intercommunicator channel)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;this.channel = channel;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;private const int OPERATION_TAG = 0;&#xA;&#x9;&#x9;&#x9;private const int OPERATION_1 = 1;&#xA;&#x9;&#x9;&#x9;private const int OPERATION_2 = 2;&#xA;&#x9;&#x9;&#x9;private const int OPERATION_3 = 3;&#xA;&#x9;&#x9;&#x9;private const int OPERATION_4 = 4;&#xA;&#x9;&#x9;&#x9;private const int OPERATION_5 = 5;&#xA;&#x9;&#x9;&#x9;private const int OPERATION_6 = 6;&#xA;&#x9;&#x9;&#x9;private const int OPERATION_7 = 7;&#xA;&#xA;&#x9;&#x9;&#x9;#region IMbyNClientPortTypeExample implementation&#xA;&#xA;&#x9;&#x9;&#x9;private void sendArguments (int operation_tag, int arg1, int arg2, int arg3, IScatterArgument&lt;int> arg4, IScatterArgument&lt;int> arg5, IScatterArgument&lt;int> arg6, ref MPI.RequestList reqList)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;int remote_size = channel.RemoteSize;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;arg4.check_size (remote_size);&#xA;&#x9;&#x9;&#x9;&#x9;arg5.check_size (remote_size);&#xA;&#x9;&#x9;&#x9;&#x9;arg6.check_size (remote_size);&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;for (int server = 0; server &lt; remote_size; server++) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (channel.Rank == 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;channel.Send&lt;int> (operation_tag, server, OPERATION_TAG);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int arg1_ = arg1;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int arg2_ = arg2;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int arg3_ = arg3;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int arg4_ = arg4.Value[server];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int arg5_ = arg5.Value[server];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int arg6_ = arg6.Value[server];&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple&lt;int,int,int,int,int,int> send_value = new Tuple&lt;int,int,int,int,int,int> (arg1_, arg2_, arg3_, arg4_, arg5_, arg6_);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MPI.Request req = channel.ImmediateSend&lt;Tuple&lt;int,int,int,int,int,int>> (send_value, server, operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reqList.Add (req);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;private void receiveResult&lt;T> (ref MPI.RequestList reqList, int operation_tag)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;int remote_size = channel.RemoteSize;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;for (int server = 0; server &lt; remote_size; server++) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MPI.Request req = channel.ImmediateReceive&lt;T> (server, operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reqList.Add (req);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;private int[] takeResults (IList&lt;MPI.Request> reqList_complete)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;int[] result_values = new int[channel.RemoteSize];&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;foreach (MPI.Request req in reqList_complete) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (req is MPI.ReceiveRequest) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MPI.ReceiveRequest recv_req = (MPI.ReceiveRequest)req;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MPI.CompletedStatus status = recv_req.Wait ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int value = (int) recv_req.GetValue ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;result_values [status.Source] = value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;return result_values;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public void some_method_1 (int arg1, int arg2, int arg3, IScatterArgument&lt;int> arg4, IScatterArgument&lt;int> arg5, IScatterArgument&lt;int> arg6)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.RequestList reqList = new MPI.RequestList ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sendArguments (OPERATION_1, arg1, arg2, arg3, arg4, arg5, arg6, ref reqList);&#xA;&#x9;&#x9;&#x9;&#x9;receiveResult&lt;int> (ref reqList, OPERATION_1);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;reqList.WaitAll ();&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public IGatherResult&lt;int> some_method_2 (int arg1, int arg2, int arg3, IScatterArgument&lt;int> arg4, IScatterArgument&lt;int> arg5, IScatterArgument&lt;int> arg6)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.RequestList reqList = new MPI.RequestList ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sendArguments (OPERATION_2, arg1, arg2, arg3, arg4, arg5, arg6, ref reqList);&#xA;&#x9;&#x9;&#x9;&#x9;receiveResult&lt;int> (ref reqList, OPERATION_2);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;MPI.Request> reqList_complete = reqList.WaitAll ();&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;int[] result_values = takeResults (reqList_complete);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;return GatherResult&lt;int>.newResult (channel, result_values);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public IReduceResult&lt;int> some_method_3 (int arg1, int arg2, int arg3, IScatterArgument&lt;int> arg4, IScatterArgument&lt;int> arg5, IScatterArgument&lt;int> arg6)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.RequestList reqList = new MPI.RequestList ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sendArguments (OPERATION_3, arg1, arg2, arg3, arg4, arg5, arg6, ref reqList);&#xA;&#x9;&#x9;&#x9;&#x9;receiveResult&lt;int> (ref reqList, OPERATION_3);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;MPI.Request> reqList_complete = reqList.WaitAll ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;int[] result_values = takeResults (reqList_complete);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;return ReduceResult&lt;int>.newResult (channel, result_values, sum, 0);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public IScanResult&lt;int> some_method_4 (int arg1, int arg2, int arg3, IScatterArgument&lt;int> arg4, IScatterArgument&lt;int> arg5, IScatterArgument&lt;int> arg6)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.RequestList reqList = new MPI.RequestList ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sendArguments (OPERATION_4, arg1, arg2, arg3, arg4, arg5, arg6, ref reqList);&#xA;&#x9;&#x9;&#x9;&#x9;receiveResult&lt;int> (ref reqList, OPERATION_4);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;MPI.Request> reqList_complete = reqList.WaitAll ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;int[] result_values = takeResults (reqList_complete);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;return ScanResult&lt;int>.newResult (channel, result_values, sum, 0);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public IGatherResult&lt;int> some_method_5 (int arg1, int arg2, int arg3, IScatterArgument&lt;int> arg4, IScatterArgument&lt;int> arg5, IScatterArgument&lt;int> arg6)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.RequestList reqList = new MPI.RequestList ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sendArguments (OPERATION_5, arg1, arg2, arg3, arg4, arg5, arg6, ref reqList);&#xA;&#x9;&#x9;&#x9;&#x9;receiveResult&lt;int> (ref reqList, OPERATION_5);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;MPI.Request> reqList_complete = reqList.WaitAll ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;int[] result_values = takeResults (reqList_complete);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;return GatherResult&lt;int>.newResult (channel, result_values);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public IReduceResult&lt;int> some_method_6 (int arg1, int arg2, int arg3, IScatterArgument&lt;int> arg4, IScatterArgument&lt;int> arg5, IScatterArgument&lt;int> arg6)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.RequestList reqList = new MPI.RequestList ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sendArguments (OPERATION_6, arg1, arg2, arg3, arg4, arg5, arg6, ref reqList);&#xA;&#x9;&#x9;&#x9;&#x9;receiveResult&lt;int> (ref reqList, OPERATION_6);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;MPI.Request> reqList_complete = reqList.WaitAll ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;int[] result_values = takeResults (reqList_complete);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;return ReduceResult&lt;int>.newResult (channel, result_values, sum, 0);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;public IScanResult&lt;int> some_method_7 (int arg1, int arg2, int arg3, IScatterArgument&lt;int> arg4, IScatterArgument&lt;int> arg5, IScatterArgument&lt;int> arg6)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.RequestList reqList = new MPI.RequestList ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sendArguments (OPERATION_7, arg1, arg2, arg3, arg4, arg5, arg6, ref reqList);&#xA;&#x9;&#x9;&#x9;&#x9;receiveResult&lt;int> (ref reqList, OPERATION_7);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;MPI.Request> reqList_complete = reqList.WaitAll ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;int[] result_values = takeResults (reqList_complete);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;return ScanResult&lt;int>.newResult (channel, result_values, sum, 0);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;&#x9;private int sum(int a, int b) {&#xA;&#x9;&#x9;&#x9;&#x9;return a + b;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" name="IBindingMyNIntraExampleClient.cs" srcType="user" uri="br.ufc.mdcc.hpc.storm.binding.environment.impl.BindingMbyNIntraExampleImpl/bin/1.0.0.0/IBindingMyNIntraExampleClient.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.storm.binding.environment.impl.BindingMbyNIntraExampleImpl/bin/1.0.0.0/BaseIBindingMyNIntraExampleClient.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingMbyNIntra/bin/1.0.0.0/IClientMbyNIntra.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="184" x="41" y="75">
        <color b="0" g="255" r="255"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <interface iRef="IBindingMyNIntraExampleServer" nArgs="1">
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.example.MbyN.EnvironmentPortTypeServer;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingMbyNIntra;&#xA;&#xA;namespace br.ufc.mdcc.hpc.storm.binding.environment.impl.BindingMbyNIntraExampleImpl &#xA;{&#xA;&#x9;public abstract class BaseIBindingMyNIntraExampleServer&lt;S>: Synchronizer, BaseIServerMbyNIntra&lt;S>&#xA;&#x9;&#x9;where S:IMbyNServerPortTypeExample&#xA;&#x9;{&#xA;&#x9;&#x9;private S server_port_type = default(S);&#xA;&#xA;&#x9;&#x9;protected S Server_port_type&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.server_port_type == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.server_port_type = (S) Services.getPort(&quot;server_port_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.server_port_type;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseIBindingMyNIntraExampleServer.cs" srcType="base" uri="br.ufc.mdcc.hpc.storm.binding.environment.impl.BindingMbyNIntraExampleImpl/bin/1.0.0.0/BaseIBindingMyNIntraExampleServer.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortType/bin/1.0.0.0/IEnvironmentPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingMbyNIntra/bin/1.0.0.0/BaseIServerMbyNIntra.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.example.MbyN.EnvironmentPortTypeServer;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingMbyNIntra;&#xA;using System.Collections.Generic;&#xA;using br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentPortTypeMultiplePartner;&#xA;&#xA;namespace br.ufc.mdcc.hpc.storm.binding.environment.impl.BindingMbyNIntraExampleImpl&#xA;{&#xA;//&#x9;public class IBindingMyNIntraExampleServer&lt;S> : BaseIBindingMyNIntraExampleServer&lt;S>, IServerMbyNIntra&lt;S>&#xA;//&#x9;&#x9;where S:IMbyNServerPortTypeExample&#xA;&#x9;public class IBindingMyNIntraExampleServer : BaseIBindingMyNIntraExampleServer&lt;IMbyNServerPortTypeExample>, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IServerMbyNIntra&lt;IMbyNServerPortTypeExample>&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;private MPI.Intercommunicator channel;&#xA;&#xA;&#x9;&#x9;public override void after_initialize ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int remote_leader = this.UnitRanks [&quot;client&quot;] [0];&#xA;&#x9;&#x9;&#x9;channel = new MPI.Intercommunicator(this.PeerComm, 0, this.Communicator, remote_leader, 0);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private const int OPERATION_TAG = 0;&#xA;&#x9;&#x9;private const int OPERATION_1 = 1;&#xA;&#x9;&#x9;private const int OPERATION_2 = 2;&#xA;&#x9;&#x9;private const int OPERATION_3 = 3;&#xA;&#x9;&#x9;private const int OPERATION_4 = 4;&#xA;&#x9;&#x9;private const int OPERATION_5 = 5;&#xA;&#x9;&#x9;private const int OPERATION_6 = 6;&#xA;&#x9;&#x9;private const int OPERATION_7 = 7;&#xA;&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int remote_size = channel.RemoteSize;&#xA;&#xA;&#x9;&#x9;&#x9;while (true) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.RequestList reqList = new MPI.RequestList ();&#xA;&#x9;&#x9;&#x9;&#x9;int operation_tag = channel.Receive&lt;int> (0, OPERATION_TAG);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;for (int client=0; client&lt;remote_size; client++) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MPI.ReceiveRequest req = channel.ImmediateReceive&lt;Tuple&lt;int,int,int,int,int,int>> (client, operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reqList.Add (req);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;MPI.Request> reqList_complete = reqList.WaitAll ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;switch (operation_tag) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;case OPERATION_1:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handleOperation1 (reqList_complete);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;case OPERATION_2:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handleOperation2 (reqList_complete);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;case OPERATION_3:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handleOperation3 (reqList_complete);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;case OPERATION_4:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handleOperation4 (reqList_complete);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;case OPERATION_5:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handleOperation5 (reqList_complete);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;case OPERATION_6:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handleOperation6 (reqList_complete);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;case OPERATION_7:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handleOperation7 (reqList_complete);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private int sum(int a, int b) {&#xA;&#x9;&#x9;&#x9;return a + b;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void returnResult (int[] result, int operation_tag)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;MPI.RequestList reqList = new MPI.RequestList ();&#xA;&#x9;&#x9;&#x9;int remote_size = channel.RemoteSize;&#xA;&#x9;&#x9;&#x9;for (int client=0; client&lt;remote_size; client++) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.Request req = channel.ImmediateSend&lt;int> (result[client], client, operation_tag);&#xA;&#x9;&#x9;&#x9;&#x9;reqList.Add (req);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;reqList.WaitAll ();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void handleOperation1 (IList&lt;MPI.Request> reqList_complete)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int[] arg1_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg2_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg3_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg4_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg5_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg6_values = new int[channel.RemoteSize];&#xA;&#xA;&#x9;&#x9;&#x9;foreach (MPI.Request req in reqList_complete) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.ReceiveRequest recv_req = (MPI.ReceiveRequest) req;&#xA;&#x9;&#x9;&#x9;&#x9;MPI.CompletedStatus status = recv_req.Test ();&#xA;&#x9;&#x9;&#x9;&#x9;Tuple&lt;int,int,int,int,int,int> value = (Tuple&lt;int,int,int,int,int,int>)recv_req.GetValue ();&#xA;&#x9;&#x9;&#x9;&#x9;arg1_values [status.Source] = value.Item1;&#xA;&#x9;&#x9;&#x9;&#x9;arg2_values [status.Source] = value.Item2;&#xA;&#x9;&#x9;&#x9;&#x9;arg3_values [status.Source] = value.Item3;&#xA;&#x9;&#x9;&#x9;&#x9;arg4_values [status.Source] = value.Item4;&#xA;&#x9;&#x9;&#x9;&#x9;arg5_values [status.Source] = value.Item5;&#xA;&#x9;&#x9;&#x9;&#x9;arg6_values [status.Source] = value.Item6;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;IGatherArgument&lt;int> arg1 = GatherArgument&lt;int>.newResult (channel, arg1_values);&#xA;&#x9;&#x9;&#x9;IReduceArgument&lt;int> arg2 = ReduceArgument&lt;int>.newResult (channel, arg2_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IScanArgument&lt;int> arg3 = ScanArgument&lt;int>.newResult (channel, arg3_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IGatherArgument&lt;int> arg4 = GatherArgument&lt;int>.newResult (channel, arg4_values);&#xA;&#x9;&#x9;&#x9;IReduceArgument&lt;int> arg5 = ReduceArgument&lt;int>.newResult (channel, arg5_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IScanArgument&lt;int> arg6 = ScanArgument&lt;int>.newResult (channel, arg6_values, sum, 0);&#xA;&#xA;&#x9;&#x9;&#x9;service.some_method_1 (arg1, arg2, arg3, arg4, arg5, arg6);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void handleOperation2 (IList&lt;MPI.Request> reqList_complete)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int[] arg1_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg2_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg3_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg4_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg5_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg6_values = new int[channel.RemoteSize];&#xA;&#xA;&#x9;&#x9;&#x9;foreach (MPI.Request req in reqList_complete) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.ReceiveRequest recv_req = (MPI.ReceiveRequest) req;&#xA;&#x9;&#x9;&#x9;&#x9;MPI.CompletedStatus status = recv_req.Test ();&#xA;&#x9;&#x9;&#x9;&#x9;Tuple&lt;int,int,int,int,int,int> value = (Tuple&lt;int,int,int,int,int,int>)recv_req.GetValue ();&#xA;&#x9;&#x9;&#x9;&#x9;arg1_values [status.Source] = value.Item1;&#xA;&#x9;&#x9;&#x9;&#x9;arg2_values [status.Source] = value.Item2;&#xA;&#x9;&#x9;&#x9;&#x9;arg3_values [status.Source] = value.Item3;&#xA;&#x9;&#x9;&#x9;&#x9;arg4_values [status.Source] = value.Item4;&#xA;&#x9;&#x9;&#x9;&#x9;arg5_values [status.Source] = value.Item5;&#xA;&#x9;&#x9;&#x9;&#x9;arg6_values [status.Source] = value.Item6;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;IGatherArgument&lt;int> arg1 = GatherArgument&lt;int>.newResult (channel, arg1_values);&#xA;&#x9;&#x9;&#x9;IReduceArgument&lt;int> arg2 = ReduceArgument&lt;int>.newResult (channel, arg2_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IScanArgument&lt;int> arg3 = ScanArgument&lt;int>.newResult (channel, arg3_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IGatherArgument&lt;int> arg4 = GatherArgument&lt;int>.newResult (channel, arg4_values);&#xA;&#x9;&#x9;&#x9;IReduceArgument&lt;int> arg5 = ReduceArgument&lt;int>.newResult (channel, arg5_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IScanArgument&lt;int> arg6 = ScanArgument&lt;int>.newResult (channel, arg6_values, sum, 0);&#xA;&#xA;&#x9;&#x9;&#x9;int result = service.some_method_2 (arg1, arg2, arg3, arg4, arg5, arg6);&#xA;&#xA;&#x9;&#x9;&#x9;int[] broadcast_result = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;broadcast_result.Length; i++)&#xA;&#x9;&#x9;&#x9;&#x9;broadcast_result [i] = result;&#xA;&#xA;&#x9;&#x9;&#x9;returnResult (broadcast_result, OPERATION_2);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void handleOperation3 (IList&lt;MPI.Request> reqList_complete)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int[] arg1_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg2_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg3_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg4_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg5_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg6_values = new int[channel.RemoteSize];&#xA;&#xA;&#x9;&#x9;&#x9;foreach (MPI.Request req in reqList_complete) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.ReceiveRequest recv_req = (MPI.ReceiveRequest) req;&#xA;&#x9;&#x9;&#x9;&#x9;MPI.CompletedStatus status = recv_req.Test ();&#xA;&#x9;&#x9;&#x9;&#x9;Tuple&lt;int,int,int,int,int,int> value = (Tuple&lt;int,int,int,int,int,int>)recv_req.GetValue ();&#xA;&#x9;&#x9;&#x9;&#x9;arg1_values [status.Source] = value.Item1;&#xA;&#x9;&#x9;&#x9;&#x9;arg2_values [status.Source] = value.Item2;&#xA;&#x9;&#x9;&#x9;&#x9;arg3_values [status.Source] = value.Item3;&#xA;&#x9;&#x9;&#x9;&#x9;arg4_values [status.Source] = value.Item4;&#xA;&#x9;&#x9;&#x9;&#x9;arg5_values [status.Source] = value.Item5;&#xA;&#x9;&#x9;&#x9;&#x9;arg6_values [status.Source] = value.Item6;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;IGatherArgument&lt;int> arg1 = GatherArgument&lt;int>.newResult (channel, arg1_values);&#xA;&#x9;&#x9;&#x9;IReduceArgument&lt;int> arg2 = ReduceArgument&lt;int>.newResult (channel, arg2_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IScanArgument&lt;int> arg3 = ScanArgument&lt;int>.newResult (channel, arg3_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IGatherArgument&lt;int> arg4 = GatherArgument&lt;int>.newResult (channel, arg4_values);&#xA;&#x9;&#x9;&#x9;IReduceArgument&lt;int> arg5 = ReduceArgument&lt;int>.newResult (channel, arg5_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IScanArgument&lt;int> arg6 = ScanArgument&lt;int>.newResult (channel, arg6_values, sum, 0);&#xA;&#xA;&#x9;&#x9;&#x9;int result = service.some_method_3 (arg1, arg2, arg3, arg4, arg5, arg6);&#xA;&#xA;&#x9;&#x9;&#x9;int[] broadcast_result = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;broadcast_result.Length; i++)&#xA;&#x9;&#x9;&#x9;&#x9;broadcast_result [i] = result;&#xA;&#xA;&#x9;&#x9;&#x9;returnResult (broadcast_result, OPERATION_3);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void handleOperation4 (IList&lt;MPI.Request> reqList_complete)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int[] arg1_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg2_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg3_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg4_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg5_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg6_values = new int[channel.RemoteSize];&#xA;&#xA;&#x9;&#x9;&#x9;foreach (MPI.Request req in reqList_complete) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.ReceiveRequest recv_req = (MPI.ReceiveRequest) req;&#xA;&#x9;&#x9;&#x9;&#x9;MPI.CompletedStatus status = recv_req.Test ();&#xA;&#x9;&#x9;&#x9;&#x9;Tuple&lt;int,int,int,int,int,int> value = (Tuple&lt;int,int,int,int,int,int>)recv_req.GetValue ();&#xA;&#x9;&#x9;&#x9;&#x9;arg1_values [status.Source] = value.Item1;&#xA;&#x9;&#x9;&#x9;&#x9;arg2_values [status.Source] = value.Item2;&#xA;&#x9;&#x9;&#x9;&#x9;arg3_values [status.Source] = value.Item3;&#xA;&#x9;&#x9;&#x9;&#x9;arg4_values [status.Source] = value.Item4;&#xA;&#x9;&#x9;&#x9;&#x9;arg5_values [status.Source] = value.Item5;&#xA;&#x9;&#x9;&#x9;&#x9;arg6_values [status.Source] = value.Item6;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;IGatherArgument&lt;int> arg1 = GatherArgument&lt;int>.newResult (channel, arg1_values);&#xA;&#x9;&#x9;&#x9;IReduceArgument&lt;int> arg2 = ReduceArgument&lt;int>.newResult (channel, arg2_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IScanArgument&lt;int> arg3 = ScanArgument&lt;int>.newResult (channel, arg3_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IGatherArgument&lt;int> arg4 = GatherArgument&lt;int>.newResult (channel, arg4_values);&#xA;&#x9;&#x9;&#x9;IReduceArgument&lt;int> arg5 = ReduceArgument&lt;int>.newResult (channel, arg5_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IScanArgument&lt;int> arg6 = ScanArgument&lt;int>.newResult (channel, arg6_values, sum, 0);&#xA;&#xA;&#x9;&#x9;&#x9;int result = service.some_method_4 (arg1, arg2, arg3, arg4, arg5, arg6);&#xA;&#xA;&#x9;&#x9;&#x9;int[] broadcast_result = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;broadcast_result.Length; i++)&#xA;&#x9;&#x9;&#x9;&#x9;broadcast_result [i] = result;&#xA;&#xA;&#x9;&#x9;&#x9;returnResult (broadcast_result, OPERATION_4);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void handleOperation5 (IList&lt;MPI.Request> reqList_complete)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int[] arg1_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg2_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg3_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg4_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg5_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg6_values = new int[channel.RemoteSize];&#xA;&#xA;&#x9;&#x9;&#x9;foreach (MPI.Request req in reqList_complete) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.ReceiveRequest recv_req = (MPI.ReceiveRequest) req;&#xA;&#x9;&#x9;&#x9;&#x9;MPI.CompletedStatus status = recv_req.Test ();&#xA;&#x9;&#x9;&#x9;&#x9;Tuple&lt;int,int,int,int,int,int> value = (Tuple&lt;int,int,int,int,int,int>)recv_req.GetValue ();&#xA;&#x9;&#x9;&#x9;&#x9;arg1_values [status.Source] = value.Item1;&#xA;&#x9;&#x9;&#x9;&#x9;arg2_values [status.Source] = value.Item2;&#xA;&#x9;&#x9;&#x9;&#x9;arg3_values [status.Source] = value.Item3;&#xA;&#x9;&#x9;&#x9;&#x9;arg4_values [status.Source] = value.Item4;&#xA;&#x9;&#x9;&#x9;&#x9;arg5_values [status.Source] = value.Item5;&#xA;&#x9;&#x9;&#x9;&#x9;arg6_values [status.Source] = value.Item6;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;IGatherArgument&lt;int> arg1 = GatherArgument&lt;int>.newResult (channel, arg1_values);&#xA;&#x9;&#x9;&#x9;IReduceArgument&lt;int> arg2 = ReduceArgument&lt;int>.newResult (channel, arg2_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IScanArgument&lt;int> arg3 = ScanArgument&lt;int>.newResult (channel, arg3_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IGatherArgument&lt;int> arg4 = GatherArgument&lt;int>.newResult (channel, arg4_values);&#xA;&#x9;&#x9;&#x9;IReduceArgument&lt;int> arg5 = ReduceArgument&lt;int>.newResult (channel, arg5_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IScanArgument&lt;int> arg6 = ScanArgument&lt;int>.newResult (channel, arg6_values, sum, 0);&#xA;&#xA;&#x9;&#x9;&#x9;IScatterResult&lt;int> result = service.some_method_5 (arg1, arg2, arg3, arg4, arg5, arg6);&#xA;&#xA;&#x9;&#x9;&#x9;returnResult (result.Value, OPERATION_5);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void handleOperation6 (IList&lt;MPI.Request> reqList_complete)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int[] arg1_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg2_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg3_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg4_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg5_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg6_values = new int[channel.RemoteSize];&#xA;&#xA;&#x9;&#x9;&#x9;foreach (MPI.Request req in reqList_complete) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.ReceiveRequest recv_req = (MPI.ReceiveRequest) req;&#xA;&#x9;&#x9;&#x9;&#x9;MPI.CompletedStatus status = recv_req.Test ();&#xA;&#x9;&#x9;&#x9;&#x9;Tuple&lt;int,int,int,int,int,int> value = (Tuple&lt;int,int,int,int,int,int>)recv_req.GetValue ();&#xA;&#x9;&#x9;&#x9;&#x9;arg1_values [status.Source] = value.Item1;&#xA;&#x9;&#x9;&#x9;&#x9;arg2_values [status.Source] = value.Item2;&#xA;&#x9;&#x9;&#x9;&#x9;arg3_values [status.Source] = value.Item3;&#xA;&#x9;&#x9;&#x9;&#x9;arg4_values [status.Source] = value.Item4;&#xA;&#x9;&#x9;&#x9;&#x9;arg5_values [status.Source] = value.Item5;&#xA;&#x9;&#x9;&#x9;&#x9;arg6_values [status.Source] = value.Item6;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;IGatherArgument&lt;int> arg1 = GatherArgument&lt;int>.newResult (channel, arg1_values);&#xA;&#x9;&#x9;&#x9;IReduceArgument&lt;int> arg2 = ReduceArgument&lt;int>.newResult (channel, arg2_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IScanArgument&lt;int> arg3 = ScanArgument&lt;int>.newResult (channel, arg3_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IGatherArgument&lt;int> arg4 = GatherArgument&lt;int>.newResult (channel, arg4_values);&#xA;&#x9;&#x9;&#x9;IReduceArgument&lt;int> arg5 = ReduceArgument&lt;int>.newResult (channel, arg5_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IScanArgument&lt;int> arg6 = ScanArgument&lt;int>.newResult (channel, arg6_values, sum, 0);&#xA;&#xA;&#x9;&#x9;&#x9;IScatterResult&lt;int> result = service.some_method_6 (arg1, arg2, arg3, arg4, arg5, arg6);&#xA;&#xA;&#x9;&#x9;&#x9;returnResult (result.Value, OPERATION_6);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void handleOperation7 (IList&lt;MPI.Request> reqList_complete)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int[] arg1_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg2_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg3_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg4_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg5_values = new int[channel.RemoteSize];&#xA;&#x9;&#x9;&#x9;int[] arg6_values = new int[channel.RemoteSize];&#xA;&#xA;&#x9;&#x9;&#x9;foreach (MPI.Request req in reqList_complete) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.ReceiveRequest recv_req = (MPI.ReceiveRequest) req;&#xA;&#x9;&#x9;&#x9;&#x9;MPI.CompletedStatus status = recv_req.Test ();&#xA;&#x9;&#x9;&#x9;&#x9;Tuple&lt;int,int,int,int,int,int> value = (Tuple&lt;int,int,int,int,int,int>)recv_req.GetValue ();&#xA;&#x9;&#x9;&#x9;&#x9;arg1_values [status.Source] = value.Item1;&#xA;&#x9;&#x9;&#x9;&#x9;arg2_values [status.Source] = value.Item2;&#xA;&#x9;&#x9;&#x9;&#x9;arg3_values [status.Source] = value.Item3;&#xA;&#x9;&#x9;&#x9;&#x9;arg4_values [status.Source] = value.Item4;&#xA;&#x9;&#x9;&#x9;&#x9;arg5_values [status.Source] = value.Item5;&#xA;&#x9;&#x9;&#x9;&#x9;arg6_values [status.Source] = value.Item6;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;IGatherArgument&lt;int> arg1 = GatherArgument&lt;int>.newResult (channel, arg1_values);&#xA;&#x9;&#x9;&#x9;IReduceArgument&lt;int> arg2 = ReduceArgument&lt;int>.newResult (channel, arg2_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IScanArgument&lt;int> arg3 = ScanArgument&lt;int>.newResult (channel, arg3_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IGatherArgument&lt;int> arg4 = GatherArgument&lt;int>.newResult (channel, arg4_values);&#xA;&#x9;&#x9;&#x9;IReduceArgument&lt;int> arg5 = ReduceArgument&lt;int>.newResult (channel, arg5_values, sum, 0);&#xA;&#x9;&#x9;&#x9;IScanArgument&lt;int> arg6 = ScanArgument&lt;int>.newResult (channel, arg6_values, sum, 0);&#xA;&#xA;&#x9;&#x9;&#x9;IScatterResult&lt;int> result = service.some_method_7 (arg1, arg2, arg3, arg4, arg5, arg6);&#xA;&#xA;&#x9;&#x9;&#x9;returnResult (result.Value, OPERATION_7);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#region IServerBase implementation&#xA;&#xA;&#x9;&#x9;private IMbyNServerPortTypeExample service;&#xA;&#xA;&#x9;&#x9;public IMbyNServerPortTypeExample Service {&#xA;&#x9;&#x9;&#x9;set {&#xA;&#x9;&#x9;&#x9;&#x9;this.service = value;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;}&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;}&#xA;" name="IBindingMyNIntraExampleServer.cs" srcType="user" uri="br.ufc.mdcc.hpc.storm.binding.environment.impl.BindingMbyNIntraExampleImpl/bin/1.0.0.0/IBindingMyNIntraExampleServer.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.storm.binding.environment.impl.BindingMbyNIntraExampleImpl/bin/1.0.0.0/BaseIBindingMyNIntraExampleServer.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.environment.EnvironmentBindingMbyNIntra/bin/1.0.0.0/IServerMbyNIntra.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="195" x="287" y="65">
        <color b="0" g="165" r="255"/>
      </visualDescription>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="IBindingMyNIntraExampleClient" multiple="true" private="false" replica="0" uRef="client" visibleInterface="true">
      <super cRef="base" uRef="client"/>
      <visualDescription h="40" w="80" x="32" y="253"/>
    </unit>
    <unit facet="0" iRef="IBindingMyNIntraExampleServer" multiple="true" private="false" replica="0" uRef="server" visibleInterface="true">
      <super cRef="base" uRef="server"/>
      <visualDescription h="40" w="80" x="414" y="266"/>
    </unit>
  </componentInfo>
</component:component>