<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000008d03d86390de40a719e90693126b2312ab111ef5115f4d10fa3fc299c3506a50ca28a352c2ac7a7632c057cea98dc5a359d33c2e24e42946df44e75517cd931d8056e7388203faffc374032b02f76dac5d270a276ae1e703ca4684fc9e53d7fea3a64379bf74e49771a02868252dc1a2e88ede7551901c10a72e89ae748a5da2" isAbstract="false" kind="Synchronizer" name="TaskBindingBaseImpl" packagePath="br.ufc.mdcc.hpc.storm.binding.task.impl">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000c92538073efed3b6da2abb966a344d01e071ba700af8755cdcc6b89b244c9821e9067b9687ab338b003a6f9f29a056b7b0c1e9a3cd474dd1aa25e0524d61c72f3e75b5e495963cd53aa2e75eae4497a75a7d814260b6ede6b274b5a097c837f24cf6e3c693b6365749ce538a40db1b4b73f2d2892ef01b7f6fc6da7e4baa28a1" localRef="base" location="br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/TaskBindingBase.hpe" name="TaskBindingBase" package="br.ufc.mdcc.hpc.storm.binding.task" version="1.0.0.0">
        <visualDescription h="60" w="141" x="194" y="353">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="task_port_type" varName="T"/>
        <unitBounds parallel="true" uRef="peer">
          <visualDescription h="20" w="20" x="17" y="24"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent localRef="task_port_type" location="br.ufc.mdcc.hpc.storm.binding.task.TaskPortType/TaskPortType.hpe" multiple="false" name="TaskPortType" package="br.ufc.mdcc.hpc.storm.binding.task" exposed="false">
      <visualDescription h="60" w="100" x="206" y="276">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds parallel="true" uRef="task_port_type">
        <visualDescription h="20" w="20" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="task_port_type" direct="true" varName="T"/>
    <interface iRef="TaskPort" nArgs="1">
      <slice isRef="task_port_type">
        <originRef cRef="task_port_type" iRef="ITaskPortType"/>
        <visualDescription h="10" w="10" x="29" y="14"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskPortType;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;&#xA;namespace br.ufc.mdcc.hpc.storm.binding.task.impl.TaskBindingBaseImpl &#xA;{&#xA;&#x9;public abstract class BaseTaskPort&lt;T>: Synchronizer, BaseITaskPort&lt;T>&#xA;&#x9;&#x9;where T:ITaskPortType&#xA;&#x9;{&#xA;&#x9;&#x9;private T task_port_type = default(T);&#xA;&#xA;&#x9;&#x9;protected T Task_port_type&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this.task_port_type == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.task_port_type = (T) Services.getPort(&quot;task_port_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.task_port_type;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" name="BaseTaskPort.cs" srcType="base" uri="br.ufc.mdcc.hpc.storm.binding.task.impl.TaskBindingBaseImpl/bin/1.0.0.0/BaseTaskPort.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskPortType/bin/1.0.0.0/ITaskPortType.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/bin/1.0.0.0/Base.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskPortType;&#xA;using br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase;&#xA;using System.Collections.Generic;&#xA;using System.Threading;&#xA;&#xA;namespace br.ufc.mdcc.hpc.storm.binding.task.impl.TaskBindingBaseImpl&#xA;{&#xA;&#x9;public class TaskPort&lt;T> : BaseTaskPort&lt;T>, ITaskPort&lt;T>&#xA;      where T:ITaskPortType&#xA;&#x9;{&#xA;&#x9;&#x9;public override void main()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public override void after_initialize ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int remote_leader = this.Id_unit.Equals(&quot;peer_right&quot;) ? this.UnitRanks [&quot;peer_left&quot;] [0] : this.UnitRanks [&quot;peer_right&quot;] [0];&#xA;&#x9;&#x9;&#x9;channel = new MPI.Intercommunicator(this.PeerComm, 0, this.Communicator, remote_leader, 0);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private MPI.Intercommunicator channel;&#xA;&#xA;&#x9;&#x9;#region ITaskPort implementation&#xA;&#xA;&#x9;&#x9;public void invoke (object action_id)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int partner_size = channel.RemoteSize;&#xA;&#x9;&#x9;&#x9;int value = ActionDef.action_ids[action_id];&#xA;&#xA;&#x9;&#x9;&#x9;MPI.RequestList request_list = new MPI.RequestList ();&#xA;&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;partner_size; i++) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.Request req = channel.ImmediateSend&lt;object>(value, i, value);&#xA;&#x9;&#x9;&#x9;&#x9;request_list.Add (req);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;partner_size; i++) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.ReceiveRequest req = channel.ImmediateReceive&lt;object>(i, value);&#xA;&#x9;&#x9;&#x9;&#x9;request_list.Add (req);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;Console.WriteLine (channel.Rank + &quot;: BEFORE WAIT ALL&quot;);&#xA;&#x9;&#x9;&#x9;request_list.WaitAll ();&#xA;&#x9;&#x9;&#x9;Console.WriteLine (channel.Rank + &quot;: AFTER WAIT ALL&quot;);&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public void invoke (object action_id, out IActionFuture future)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int value = ActionDef.action_ids[action_id];&#xA;&#x9;&#x9;&#x9;int partner_size = channel.RemoteSize;&#xA;&#xA;&#x9;&#x9;&#x9;MPI.RequestList request_list = new MPI.RequestList ();&#xA;&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;partner_size; i++) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.Request req = channel.ImmediateSend&lt;object>(value, i, value);&#xA;&#x9;&#x9;&#x9;&#x9;request_list.Add (req);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;partner_size; i++) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.ReceiveRequest req = channel.ImmediateReceive&lt;object>(i, value);&#xA;&#x9;&#x9;&#x9;&#x9;request_list.Add (req);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;ManualResetEvent sync = new ManualResetEvent (false);&#xA;&#xA;&#x9;&#x9;&#x9;ActionFuture future_ = new ActionFuture(request_list);&#xA;&#x9;&#x9;&#x9;future = future_;&#xA;&#xA;&#x9;&#x9;&#x9;Thread t = new Thread(new ThreadStart(() => handle_request(future_, sync)));&#xA;&#xA;&#x9;&#x9;&#x9;t.Start();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void handle_request (ActionFuture future, ManualResetEvent sync)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;future.RequestList.WaitAll ();&#xA;&#x9;&#x9;&#x9;sync.Set ();&#xA;&#x9;&#x9;&#x9;future.setCompleted ();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;void handle_request (ActionFuture future, ManualResetEvent sync, Action reaction)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;handle_request (future, sync);&#xA;&#x9;&#x9;&#x9;reaction ();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public Thread invoke (object action_id, Action reaction, out IActionFuture future)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;int partner_size = channel.RemoteSize;&#xA;&#x9;&#x9;&#x9;int value = ActionDef.action_ids[action_id];&#xA;&#xA;&#x9;&#x9;&#x9;MPI.RequestList request_list = new MPI.RequestList ();&#xA;&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;partner_size; i++) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.Request req = channel.ImmediateSend&lt;object>(value, i, value);&#xA;&#x9;&#x9;&#x9;&#x9;request_list.Add (req);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;partner_size; i++) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;MPI.ReceiveRequest req = channel.ImmediateReceive&lt;object>(i, value);&#xA;&#x9;&#x9;&#x9;&#x9;request_list.Add (req);&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;ManualResetEvent sync = new ManualResetEvent (false);&#xA;&#xA;&#x9;&#x9;&#x9;ActionFuture future_ = new ActionFuture(request_list, sync);&#xA;&#x9;&#x9;&#x9;future = future_;&#xA;&#xA;&#x9;&#x9;&#x9;Thread t = new Thread(new ThreadStart(() => handle_request(future_, sync, reaction)));&#xA;&#xA;&#x9;&#x9;&#x9;t.Start();&#xA;&#xA;&#x9;&#x9;&#x9;return t;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#endregion&#xA;&#x9;}&#xA;&#x9;&#xA;    internal class ActionFuture : IActionFuture&#xA;&#x9;{&#xA;&#x9;&#x9;private MPI.RequestList request_list = null;&#xA;&#x9;    private ManualResetEvent sync = null;&#xA;&#x9;&#x9;private bool completed = false;&#xA;&#xA;&#x9;&#x9;public ActionFuture (MPI.RequestList request_list)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.request_list = request_list;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public ActionFuture (MPI.RequestList request_list, ManualResetEvent sync)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.request_list = request_list;&#xA;&#x9;&#x9;&#x9;this.sync = sync;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#region ActionFuture implementation&#xA;&#x9;&#x9;public void wait ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if (!completed)&#xA;&#x9;&#x9;&#x9;&#x9;sync.WaitOne ();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public bool test ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;return completed;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public IActionFutureSet createSet()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;IActionFutureSet afs = new ActionFutureSet ();&#xA;&#x9;&#x9;&#x9;afs.addAction (this);&#xA;&#x9;&#x9;&#x9;return afs;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;#endregion&#xA;&#xA;&#x9;&#x9;public void setCompleted()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;completed = true;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public MPI.RequestList RequestList { get { return request_list; } } &#xA;&#x9;}&#xA;&#xA;&#x9;internal class ActionFutureSet : IActionFutureSet&#xA;&#x9;{&#xA;&#x9;&#x9;IList&lt;IActionFuture> pending_list = new List&lt;IActionFuture>();&#xA;&#x9;&#x9;IList&lt;IActionFuture> completed_list = new List&lt;IActionFuture>();&#xA;&#xA;&#x9;&#x9;#region ActionFutureSet implementation&#xA;&#x9;&#x9;public void addAction (IActionFuture new_future)&#xA;&#x9;&#x9;{&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;pending_list.Add (new_future);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public void waitAll ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;foreach (IActionFuture action_future in pending_list)&#xA;&#x9;&#x9;&#x9;&#x9;action_future.wait ();&#xA;&#xA;&#x9;&#x9;&#x9;foreach (IActionFuture action_future in pending_list) &#xA;&#x9;&#x9;&#x9;&#x9;completed_list.Add (action_future);&#xA;&#x9;&#x9;&#x9;pending_list.Clear ();&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;public IActionFuture waitAny ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;while (true) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;IActionFuture f = this.testAny ();&#xA;&#x9;&#x9;&#x9;&#x9;if (f != null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return f;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9; &#xA;&#x9;&#x9;public bool testAll ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;lock (sync_oper) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;bool completed = true;&#xA;&#x9;&#x9;&#x9;&#x9;IList&lt;IActionFuture> tobeRemoved = new List&lt;IActionFuture> ();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;foreach (IActionFuture action_future in pending_list) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bool one_completed = action_future.test ();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (one_completed)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;tobeRemoved.Add (action_future);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;completed = completed &amp;&amp; one_completed;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;foreach (IActionFuture f in tobeRemoved) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pending_list.Remove (f);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;completed_list.Add (f);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;return completed;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;public IActionFuture testAny ()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;lock (sync_oper) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;foreach (IActionFuture action_future in pending_list) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (action_future.test ()) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;pending_list.Remove (action_future);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;completed_list.Add (action_future);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return action_future;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;return null;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;public IActionFuture[] Completed &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;IActionFuture[] f = new IActionFuture[completed_list.Count];&#xA;&#x9;&#x9;&#x9;&#x9;completed_list.CopyTo (f, 0);&#xA;&#x9;&#x9;&#x9;&#x9;return f;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private object sync_oper = new object (); &#xA;&#xA;&#x9;&#x9;public IActionFuture[] Pending &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;get &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;IActionFuture[] f = new IActionFuture[pending_list.Count];&#xA;&#x9;&#x9;&#x9;&#x9;pending_list.CopyTo (f, 0);&#xA;&#x9;&#x9;&#x9;&#x9;return f;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#x9;}&#xA;}&#xA;" name="TaskPort.cs" srcType="user" uri="br.ufc.mdcc.hpc.storm.binding.task.impl.TaskBindingBaseImpl/bin/1.0.0.0/TaskPort.dll" versionId="1.0.0.0">
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskPortType/bin/1.0.0.0/ITaskPortType.dll</dependency>
          <dependency>%WORKSPACE/br.ufc.mdcc.hpc.storm.binding.task.impl.TaskBindingBaseImpl/bin/1.0.0.0/BaseTaskPort.dll</dependency>
          <dependency>br.ufc.mdcc.hpc.storm.binding.task.TaskBindingBase/bin/1.0.0.0/.dll</dependency>
          <externalDependency>MPI</externalDependency>
        </file>
      </sources>
      <visualDescription h="66" w="197" x="202" y="66">
        <color b="255" g="0" r="0"/>
      </visualDescription>
      <parameter iname="ITaskPortType" order="0" parid="task_port_type" uname="task_port_type" varid="T"/>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit facet="0" iRef="TaskPort" multiple="true" private="false" replica="0" uRef="peer" visibleInterface="true">
      <super cRef="base" uRef="peer"/>
      <visualDescription h="40" w="80" x="59" y="254"/>
    </unit>
  </componentInfo>
</component:component>